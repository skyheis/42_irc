The recv() and send() functions in C/C++ are used for sending and receiving
data over a socket connection. They are commonly used in network programming
to transfer information between a client and a server.


####### recv() #######

The recv() function is used to receive data from a connected socket.
It has the following function prototype:

	ssize_t recv(int sockfd, void *buf, size_t len, int flags);

The parameters of recv() are as follows:

    sockfd:	The socket file descriptor of the connected socket.
    buf:	A pointer to the buffer where the received data will be stored.
    len:	The maximum number of bytes to receive.
    flags:	Flags that modify the behavior of the recv() function
			(such as setting it to non-blocking mode).

The recv() function returns the number of bytes received,or -1 if an error occurs.
A return value of 0 indicates that the connection has been closed by the remote side.

Here's an example that demonstrates the usage of recv():

cpp

		char buffer[1024];
		ssize_t bytesRead = recv(socketDescriptor, buffer, sizeof(buffer), 0);
		if (bytesRead == -1) {
			// Error handling
		} else if (bytesRead == 0) {
			// Connection closed by the remote side
		} else {
			// Process the received data
		}

In this example, socketDescriptor is the file descriptor of the connected socket.
The received data is stored in the buffer, and bytesRead contains the number of bytes received.

The recv() function in C/C++ provides a flags parameter that allows you to modify its behavior and control
how the data is received. Here are some commonly used flags for the recv() function:

    MSG_DONTWAIT:	This flag sets the socket to non-blocking mode, causing recv() to return
					immediately if there is no data available. If no data is available, recv()returns -1
					with errno set to EAGAIN or EWOULDBLOCK. This flag is useful when you want to perform
					other tasks while waiting for data.

    MSG_PEEK:		The MSG_PEEK flag allows you to peek at the incoming data without removing it from the
					socket's receive buffer. This means that subsequent calls to recv() will still retrieve the same data.
					It is useful when you need to inspect the data before processing it, without actually consuming it.

    MSG_WAITALL:	By default, recv() returns as soon as it receives any amount of data.
					The MSG_WAITALL flag ensures that recv() blocks until the specified number of bytes (len parameter)
					have been received or the connection is closed. This is useful when you expect a specific amount
					of data and want to wait until it is fully received.

    MSG_OOB:		The MSG_OOB flag is used for out-of-band data. It indicates that the received data is urgent
					or has a higher priority than normal data. Out-of-band data is typically used in TCP socket
					communication using the SO_OOBINLINE socket option.

These are some of the commonly used flags for the recv() function. You can combine multiple flags using
the bitwise OR operator (|) if you need to specify multiple flags at the same time. For example:

		int flags = MSG_DONTWAIT | MSG_PEEK;
		ssize_t bytesRead = recv(socketDescriptor, buffer, sizeof(buffer), flags);

It's important to note that not all flags are supported on all platforms or for all socket types.
Therefore, it's a good practice to check for specific errors and handle them accordingly
when using flags with the recv() function.

You can refer to the documentation or man pages of your specific operating system for more
information on the flags supported by recv() and their detailed behavior.


####### send() #######

The send() function is used to send data over a connected socket.
It has the following function prototype:

		ssize_t send(int sockfd, const void *buf, size_t len, int flags);

The parameters of send() are as follows:

    sockfd: The socket file descriptor of the connected socket.
    buf: A pointer to the data to be sent.
    len: The number of bytes to send.
    flags: Flags that modify the behavior of the send() function
	(such as setting it to non-blocking mode).

The send() function returns the number of bytes sent, or -1 if an error occurs.

Here's an example that demonstrates the usage of send():

		const char *message = "Hello, server!";
		ssize_t bytesSent = send(socketDescriptor, message, strlen(message), 0);
		if (bytesSent == -1) {
			// Error handling
		} else {
			// Sent successfully
		}

In this example, socketDescriptor is the file descriptor of the connected socket.
The message is the data to be sent, and strlen(message) provides the length of the message in bytes.


------------------------------------------------------------------
Both recv() and send() functions can be used in combination to establish bidirectional
communication between a client and a server. It's important to handle errors appropriately
and ensure that the correct amount of data is sent and received to ensure reliable communication.
------------------------------------------------------------------




